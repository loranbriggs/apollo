// Code generated by go-bindata.
// sources:
// assets/home.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsHomeHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xb1\x8e\xdb\x30\x0c\xdd\xef\x2b\x58\xee\x8d\x7a\x28\x0a\x74\x90\x5d\x04\xc9\x0d\x9d\xae\xc3\x2d\x1d\x15\x8b\x39\x0b\x90\x25\xc3\xa6\x0f\x3d\x18\xfe\xf7\x42\x91\xe4\xc4\x6e\x92\xde\x14\x91\x7c\x7c\x26\x5f\x48\xca\x4f\xfb\xe7\xdd\xcb\xef\x5f\x4f\x50\x73\x63\xcb\x07\x19\x7e\xc0\x2a\xf7\x5a\x20\x39\x2c\x1f\x00\x64\x4d\x4a\x87\x07\x80\x6c\x88\x15\x54\xb5\xea\x7a\xe2\x02\x07\x3e\x7e\xfe\x8e\x20\x52\x90\x0d\x5b\x2a\xb7\xad\xb7\xd6\x4b\x11\xad\x90\x2f\x22\x41\x78\x1e\xbc\x7e\x4f\xe8\xe0\xa4\x2e\x1a\xc1\x7c\x9c\x33\xeb\xc7\x04\x11\x19\x13\xcd\xa3\xef\x1a\x68\x88\x6b\xaf\x0b\x6c\x7d\xcf\x08\xaa\x62\xe3\x5d\x81\xa2\xea\x48\x31\x3d\xbd\x91\x63\x9c\x39\x8d\x6b\x07\x06\x7e\x6f\xa9\x40\xa6\x3f\x8c\xe0\x54\x13\xde\xa6\x21\x84\xd6\xaa\x8a\x6a\x6f\x35\x75\xc9\x35\x27\xf6\x64\xa9\xe2\x84\x8e\xdf\x98\x83\x20\x7d\x1b\x1c\xf0\xa6\xec\x40\x05\xfa\x36\xe8\xf4\xdc\x92\x93\x22\x46\x6e\x21\x2b\xeb\x7b\xc2\x72\x17\x7e\xd6\x58\x29\xe2\x37\xaf\xd6\xde\x0f\x87\xc6\x30\x66\x9e\xad\xd6\x10\x3b\xcd\xca\x8b\x20\x4d\x96\x89\xd5\x21\x0a\x1f\xad\x59\xe2\x60\xd4\x65\x68\x54\x0a\xae\x97\xde\xd8\xe3\xbf\x7e\xb8\x74\x49\x71\x26\x1b\x47\x30\x47\xd8\x9c\xca\xe8\x61\x9a\xe6\xac\x71\x84\x4e\xb9\x57\xba\x16\x5b\x95\x13\x1d\xba\x1c\x47\xd8\xbc\x98\x86\x60\x9a\xa4\x60\x7d\x1d\xb0\x3d\x55\x78\x13\x22\x15\xd4\x1d\x1d\x0b\x14\x9a\x2c\xa5\x49\xf8\x61\x74\x31\x8e\x9b\x9f\x7a\x9a\xb0\xdc\x9f\xfc\x52\xa8\x72\xcd\x70\xd9\xd7\xa9\x01\x72\xfa\x5c\xf6\xd9\x4e\x5a\x27\x7d\x3f\x22\xf6\x2d\x59\xf5\xd0\xa9\xeb\x11\xd2\x86\xef\x68\x9e\xa4\xdd\xa7\xfc\x85\xba\x2b\x6d\xff\x2b\x5c\x06\x64\xb2\x1b\x90\xa5\xd4\xf7\x76\x70\x68\xb5\x62\xca\x74\xb8\xcc\x5c\x8d\x74\x6d\xb4\x26\x87\xcb\x15\x4b\x03\xbe\xa8\x3a\x5f\x97\x1b\x3c\x6e\x68\x0e\xd4\x65\x9e\xac\x2b\x42\x63\x5c\x81\xdf\x10\x7a\xa6\xf6\xf4\x58\x6c\xfb\xd7\x2f\x58\x42\x4f\x95\x77\xba\xbf\xc7\xbe\x5a\xbc\x5d\x1d\xe4\xc7\x55\x45\x79\xfb\x16\x03\x75\xa1\xdb\xea\x2f\xbc\x3e\x4c\xf9\xc2\x79\xce\x37\x31\xd0\x66\x4b\x8a\x78\x38\xa5\x88\x57\xfa\x6f\x00\x00\x00\xff\xff\xac\x6a\x4f\x9f\xb6\x05\x00\x00")

func assetsHomeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsHomeHtml,
		"assets/home.html",
	)
}

func assetsHomeHtml() (*asset, error) {
	bytes, err := assetsHomeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/home.html", size: 1462, mode: os.FileMode(420), modTime: time.Unix(1521188208, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/home.html": assetsHomeHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"home.html": &bintree{assetsHomeHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

