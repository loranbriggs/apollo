// Code generated by go-bindata.
// sources:
// assets/.home.html.swp
// assets/home.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsHomeHtmlSwp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9a\xcd\x8b\x1c\x45\x18\xc6\x9f\x08\xca\x4e\x6f\x7f\x88\x1e\xbd\x54\x4a\xc8\x41\xc8\xd4\x6e\x56\xd1\x43\xf5\x84\x75\x37\x60\x14\x89\x48\x14\x76\x15\xa4\x66\xba\x76\xba\xb5\xbf\xec\xae\x59\xb3\xb4\xb3\xde\x14\xd4\xa3\xd1\x83\x07\x0f\x22\x82\x82\x17\x11\xc9\x1f\x10\xc1\x8b\x17\x83\x88\x20\x5e\x3c\x2a\xe8\xc5\x9b\x20\xdd\x3d\x3d\x5f\xbb\x33\xd9\x5c\x8c\x86\xfa\x5d\xba\xde\xb7\xde\xb7\xea\xad\xa7\x3e\x60\xd9\xe9\xae\x3d\x7f\xf1\x69\xf2\x68\xfb\x61\x00\xb8\x17\xd8\x97\x9f\xef\xbe\x6a\xed\xe0\xfa\x55\x20\x4c\x32\x11\xe3\xe6\x54\x71\xf9\x59\x11\x64\xed\x70\x59\xc2\x61\x15\xc8\xfa\x09\xcb\xb3\x1e\xeb\x07\xca\x1f\x74\xdb\xbd\x24\x62\x95\xbf\x9b\x05\xfd\x7e\xce\x44\x9a\x84\x61\xc2\x44\x9e\x4b\x95\x33\x3f\x89\x64\xdb\x57\x51\x78\x82\x32\x34\x1a\xcd\x22\x06\x6a\xef\xec\x63\x16\x36\xce\xad\xaf\x95\xe6\x83\xf4\x34\xb9\xff\xbe\xe7\x6e\x77\x55\x1a\x8d\x46\xa3\xd1\x68\x34\x1a\x8d\xe6\x5f\x44\xa5\xa7\xf0\x06\x80\xbb\x46\xf6\xe3\xa3\xef\xa9\xb9\xaf\x46\xa3\xd1\x68\x34\x1a\x8d\x46\xa3\xd1\x68\x34\x9a\xff\x2f\xc2\x03\xce\xb4\x80\x27\x8d\xfa\xff\xff\xcd\xdf\xff\x7f\x38\xc0\x2f\x0e\xf0\x83\x03\x5c\x73\x80\x8f\x1c\xe0\xaa\x03\xbc\xe7\x00\xef\x38\xc0\xa1\x03\xf8\x0e\xb0\xeb\x00\x3b\x0e\xf0\x90\x03\xfc\x69\x03\x37\x6c\xe0\x33\x1b\x38\xb4\x81\xd8\x06\xce\xdb\xc0\x86\x0d\x9c\xb3\x81\x33\x36\xf0\x80\x0d\xdc\x6d\x03\xbf\x5b\xc0\x4f\x16\xf0\x9d\x05\x7c\x6d\x01\x1f\x5a\xc0\xbb\x16\xf0\x8a\x05\x3c\x61\x01\xf7\x58\xc0\x5f\x26\xf0\xab\x09\xdc\x30\x81\xef\x4d\xe0\x1b\x13\xb8\x6e\x02\xd7\x4c\xe0\x0b\x13\x78\xdf\x04\x5e\x37\x81\x3d\x13\xd8\x35\x01\xd7\x04\xd6\x4c\xc0\x31\x81\xdf\x56\x81\x9f\x57\x81\x8f\x57\x81\x17\x56\x81\xbf\x0d\xe0\x5b\x03\xf8\xca\x00\x3e\x31\x80\x0f\x0c\xe0\x2d\x03\x78\xd3\x00\x0e\x0c\xe0\x8a\x01\xbc\x66\x00\x2f\x1b\xc0\x8b\x06\xf0\xac\x51\x6b\x32\x68\x01\x2f\xb5\x80\xa7\x5a\x40\xa7\x05\x18\x2d\xe0\xc7\x15\xe0\xcb\x15\xe0\xd3\x15\xe0\xed\x95\xdb\xbc\x81\x1a\x8d\x46\xa3\xd1\xfc\x27\xe0\xcc\x57\x51\xd8\x01\x29\x1b\x9c\x33\x7f\xe4\xe0\x8c\x37\x9e\xba\x9f\x70\xd6\x4d\xbc\x83\xb2\x55\xb6\x17\xf9\xf7\x92\x44\xc9\xe9\xce\xa5\x81\xd9\xc8\x3a\x51\x50\x63\x00\x55\xdf\xad\x66\xcc\xcd\x72\xdc\x00\x8b\x06\xbd\xf5\xa9\x98\x12\xdd\x50\x76\x6a\x8b\x90\xa2\x20\x32\xf6\xc8\x70\x38\xb2\xab\x88\x51\xea\xd8\xf6\xa6\xed\x7a\x82\x2c\x9a\xf5\x11\xc2\x83\x38\x1d\x28\xa2\x0e\x52\xe9\xd2\x7c\xd0\x8d\x02\x45\xc9\xbe\x08\x07\xd2\xa5\x5b\xbe\x88\xfb\x92\xb2\xa5\x39\xf1\x20\xea\xca\x8c\xde\x91\x8b\x22\xb1\x88\xa4\x4b\xbd\x41\x26\x54\x90\xc4\x94\x44\x41\xec\xd2\x47\x28\xc9\x95\x4c\xab\x46\x1a\x8a\x9e\xf4\x93\xd0\x93\x99\x4b\x37\xd6\x68\x87\xe4\xb2\x97\xc4\x5e\xbe\x6c\x74\x3f\xf0\x3c\x19\x37\xa3\x8b\x5e\x3d\x76\x5d\x5f\x51\x90\xf6\x66\xe5\x21\xc3\x21\x99\xab\x92\x97\x8b\x25\x91\x54\x7e\xe2\xb9\x34\x4d\x72\x45\x49\x9d\xee\x52\x36\x48\x3d\xa1\xe4\x76\x53\xeb\x8c\x6e\xb3\xb2\x95\x66\x39\x4f\x13\x4b\x86\xc3\x79\x65\x9b\x90\x71\x29\xb3\x01\x7c\xb2\x2f\x45\x41\xb2\x52\xd1\xc9\x70\xf9\x64\x0b\x67\x37\x90\x2b\xbf\x23\xbd\x40\x71\xa6\xfc\x59\x6f\xa3\xf0\xd1\x9e\x7a\x79\xd3\xfe\xf1\xdc\x7c\xfa\xf8\xdc\xfc\x30\x1d\xf5\x1c\x3d\x60\xf5\xc2\xb9\x20\x7e\x26\xf7\x5c\xca\x3c\x19\x4a\x25\x2f\xec\xcb\x58\x9d\x0f\x3c\xb7\x28\xda\x17\xbd\xe1\x90\x76\xb6\x2b\x3f\x67\xa2\x73\xcc\x91\x5c\x2e\xdd\x74\xc8\xe5\x20\x92\xc7\x8a\x3f\x55\xd4\x44\xdf\xaa\x8c\x29\x71\x8b\x82\x04\x7b\x47\xdd\x47\x35\x27\x27\x91\xb5\xf6\xab\x20\x92\x27\x11\x7b\xfa\xd6\x2d\xbb\x6d\x9b\x9e\x47\xaa\x02\x27\x17\x8e\xb3\x5c\x86\xb2\xa7\xc6\x13\xf3\x24\xad\x94\x1a\xa5\xf4\xc2\x24\x97\xb4\xb3\x55\x7e\x38\xab\xfb\x16\xc5\x26\xa9\x8c\x69\xe7\x52\x2a\xe3\xf9\x48\x5e\x4f\x32\x7b\xc7\x8e\xad\x58\xc9\x2b\xaa\xb9\x8b\xe5\xf2\xe7\x2e\x75\xe5\x1a\xbf\x5f\x8b\xaf\x5f\x2f\x93\x62\x74\x54\xe8\x58\x26\x5f\x0a\x4f\x8e\x77\x83\xfb\xeb\x9d\xcd\xea\x07\xee\x9c\xf9\xeb\xa3\x31\x27\x21\xbc\x7e\x37\xd1\x24\x36\xc2\x07\x2a\x94\xe3\xbc\xda\xaa\x7b\x22\xa9\x04\xe9\xf9\x22\xcb\xa5\x72\x69\xf5\x13\x5f\x5a\x3f\x19\xbc\xce\xe7\xe5\x9b\x4c\x42\x11\xf7\x5d\x5a\x0a\x05\x7e\x7a\xfb\xd2\xd6\xe5\x9d\x67\x2e\x90\xfa\xb5\xfe\x27\x00\x00\xff\xff\xef\x90\x1c\x2a\x00\x30\x00\x00")

func assetsHomeHtmlSwpBytes() ([]byte, error) {
	return bindataRead(
		_assetsHomeHtmlSwp,
		"assets/.home.html.swp",
	)
}

func assetsHomeHtmlSwp() (*asset, error) {
	bytes, err := assetsHomeHtmlSwpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/.home.html.swp", size: 12288, mode: os.FileMode(420), modTime: time.Unix(1521182078, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsHomeHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xb1\x8e\xdb\x30\x0c\xdd\xef\x2b\x58\xee\x8d\x7a\x28\x0a\x74\x90\x5d\x04\xc9\x0d\x9d\xae\xc3\x2d\x1d\x15\x8b\x39\x0b\x90\x25\xc3\xa6\x0f\x3d\x18\xfe\xf7\x42\x91\xe4\xc4\x6e\x92\xde\x14\x91\x7c\x7c\x26\x5f\x48\xca\x4f\xfb\xe7\xdd\xcb\xef\x5f\x4f\x50\x73\x63\xcb\x07\x19\x7e\xc0\x2a\xf7\x5a\x20\x39\x2c\x1f\x00\x64\x4d\x4a\x87\x07\x80\x6c\x88\x15\x54\xb5\xea\x7a\xe2\x02\x07\x3e\x7e\xfe\x8e\x20\x52\x90\x0d\x5b\x2a\xb7\xad\xb7\xd6\x4b\x11\xad\x90\x2f\x22\x41\x78\x1e\xbc\x7e\x4f\xe8\xe0\xa4\x2e\x1a\xc1\x7c\x9c\x33\xeb\xc7\x04\x11\x19\x13\xcd\xa3\xef\x1a\x68\x88\x6b\xaf\x0b\x6c\x7d\xcf\x08\xaa\x62\xe3\x5d\x81\xa2\xea\x48\x31\x3d\xbd\x91\x63\x9c\x39\x8d\x6b\x07\x06\x7e\x6f\xa9\x40\xa6\x3f\x8c\xe0\x54\x13\xde\xa6\x21\x84\xd6\xaa\x8a\x6a\x6f\x35\x75\xc9\x35\x27\xf6\x64\xa9\xe2\x84\x8e\xdf\x98\x83\x20\x7d\x1b\x1c\xf0\xa6\xec\x40\x05\xfa\x36\xe8\xf4\xdc\x92\x93\x22\x46\x6e\x21\x2b\xeb\x7b\xc2\x72\x17\x7e\xd6\x58\x29\xe2\x37\xaf\xd6\xde\x0f\x87\xc6\x30\x66\x9e\xad\xd6\x10\x3b\xcd\xca\x8b\x20\x4d\x96\x89\xd5\x21\x0a\x1f\xad\x59\xe2\x60\xd4\x65\x68\x54\x0a\xae\x97\xde\xd8\xe3\xbf\x7e\xb8\x74\x49\x71\x26\x1b\x47\x30\x47\xd8\x9c\xca\xe8\x61\x9a\xe6\xac\x71\x84\x4e\xb9\x57\xba\x16\x5b\x95\x13\x1d\xba\x1c\x47\xd8\xbc\x98\x86\x60\x9a\xa4\x60\x7d\x1d\xb0\x3d\x55\x78\x13\x22\x15\xd4\x1d\x1d\x0b\x14\x9a\x2c\xa5\x49\xf8\x61\x74\x31\x8e\x9b\x9f\x7a\x9a\xb0\xdc\x9f\xfc\x52\xa8\x72\xcd\x70\xd9\xd7\xa9\x01\x72\xfa\x5c\xf6\xd9\x4e\x5a\x27\x7d\x3f\x22\xf6\x2d\x59\xf5\xd0\xa9\xeb\x11\xd2\x86\xef\x68\x9e\xa4\xdd\xa7\xfc\x85\xba\x2b\x6d\xff\x2b\x5c\x06\x64\xb2\x1b\x90\xa5\xd4\xf7\x76\x70\x68\xb5\x62\xca\x74\xb8\xcc\x5c\x8d\x74\x6d\xb4\x26\x87\xcb\x15\x4b\x03\xbe\xa8\x3a\x5f\x97\x1b\x3c\x6e\x68\x0e\xd4\x65\x9e\xac\x2b\x42\x63\x5c\x81\xdf\x10\x7a\xa6\xf6\xf4\x58\x6c\xfb\xd7\x2f\x58\x42\x4f\x95\x77\xba\xbf\xc7\xbe\x5a\xbc\x5d\x1d\xe4\xc7\x55\x45\x79\xfb\x16\x03\x75\xa1\xdb\xea\x2f\xbc\x3e\x4c\xf9\xc2\x79\xce\x37\x31\xd0\x66\x4b\x8a\x78\x38\xa5\x88\x57\xfa\x6f\x00\x00\x00\xff\xff\xac\x6a\x4f\x9f\xb6\x05\x00\x00")

func assetsHomeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsHomeHtml,
		"assets/home.html",
	)
}

func assetsHomeHtml() (*asset, error) {
	bytes, err := assetsHomeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/home.html", size: 1462, mode: os.FileMode(420), modTime: time.Unix(1521182070, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/.home.html.swp": assetsHomeHtmlSwp,
	"assets/home.html": assetsHomeHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		".home.html.swp": &bintree{assetsHomeHtmlSwp, map[string]*bintree{}},
		"home.html": &bintree{assetsHomeHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

